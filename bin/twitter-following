#!/usr/bin/env ruby
require 'optparse'
require 'twitter'

# Parse arguments
options = {}
OptionParser.new do |opts|
  opts.banner = "usage: #{opts.program_name} [-r] [-u USER] [-l LISTNAME]"
  opts.separator "Show who is being followed by a user or a list."
  opts.separator ""
  opts.on("-u", "--user USER", "specify a username (default is the logged-in user)") do |optarg|
    options[:user] = optarg
  end
  opts.on("-l", "--list LISTNAME", "show members of the user's LISTNAME instead of the user's followers") do |optarg|
    options[:list] = optarg
  end
  opts.on("-r", "--reverse", "show followers instead of who is following") do |optarg|
    options[:reverse] = optarg
  end
  opts.separator ""
  opts.separator "Global options:"
  opts.on("--auth FILE", "Read authentication data from the specified FILE") do |optarg|
    options[:auth_file] = optarg
  end
  opts.separator ""
end.parse!
options[:auth_file] ||= ENV["TWITTER_AUTHFILE"]
options[:auth_file] ||= File.expand_path("~/.twitter")
raise "No --auth file specified" unless options[:auth_file] # XXX TODO - output usage information
raise "Too many arguments specified" unless ARGV.empty? # XXX TODO - output usage information

auth = YAML.load_file(options[:auth_file])
oauth = Twitter::OAuth.new(auth["token"], auth["secret"])
oauth.authorize_from_access(auth["atoken"], auth["asecret"])
base = Twitter::Base.new(oauth)

# Knowing our own screen name is required when fetching list members
if options[:list]
  options[:user] ||= auth["user"]
  options[:user] ||= base.verify_credentials.screen_name
end

cursor = -1
begin
  query = {}
  if options[:list]
    if options[:reverse]
      result = base.list_subscribers(options[:user], options[:list], query.merge(:cursor => cursor))
    else
      result = base.list_members(options[:user], options[:list], query.merge(:cursor => cursor))
    end
  else
    query[:screen_name] = options[:user] if options[:user]
    if options[:reverse]
      result = base.followers(query.merge(:cursor => cursor))
    else
      result = base.friends(query.merge(:cursor => cursor))
    end
  end
  result.users.each do |u|
    puts u.screen_name
  end
  cursor = result.next_cursor
end until cursor == 0
